# Joseph Barnes
# functions.py

import pyperclip  # corrected text in option 1 is added to clipboard for use
import re  # allows Regex
import copy  # create deepcopy of input text to manipulate while looping through original string
import sys  # for sys.exit() to leave program
import shutil # allows renaming files
import os # used for searching files
from pathlib import Path

def validateFile(inStr): # validates that a filename exists
    strRegex = re.compile(inStr)
    for fileName in os.listdir('.'):
        mo = strRegex.search(fileName)
        if mo == None:
            continue # continues through the loop
        return True # if filename is found, return True
    return False    # if not found, return False

def RTL_phone_nums():  # corrects phone numbers in a document)
    try:
        # use regex to build a list of all phone numbers in the document

        # This regex matches bad/reversed phone numbers such as 7890-456-(123)
        badPhoneNumRegex = re.compile(r'''    
            (\d{4}[-\.\s]\d{3}[-\.\s]\d{3}|             #7890-456-123
            \d{4}[-\.\s]\d{3}[-\.\s]\(\d{3}\)|          #7890.456.(123)
            \d{4}[-\.\s]\(\d{3}\)\d{3}|                 #7890 (123)4567
            \d{4}[-\.\s]\d{3})                       	#4567 123
                                                        #doesn't need to handle extensions as they don't seem to get messed up
            ''', re.VERBOSE)

        # open file to read from
        inStr = input("Enter a file name (with extension) to fix the phone numbers ") 
        
        # validate the file name
        while validateFile(inStr) == False:
            inStr = input(f'File name: "{inStr}" not found. Try again (with file extension) or enter 0 to return to main menu.\n')
            if inStr == '0':
                return 0
        
        inFile = open("./" + inStr)
        text = inFile.read()
        inFile.close()
                
        # get all the bad phone numbers in a match object (mo) list
        mo = badPhoneNumRegex.findall(text)
        
        correctPhoneNums = []  # used to show the corrected numbers
        newText = copy.deepcopy(text) #copy of input string 

        # go through mo and create new list of corrected phone numbers
        # piece together the segments of phone numbers to correct them
        for i, pn in enumerate(mo):
            if len(mo[i]) == 8:
                newNum = mo[i][5:8] + mo[i][4:5] + mo[i][0:4]  # 4567-123
            elif len(mo[i]) == 11:            
                newNum = mo[i][5:8] + mo[i][4:5] + mo[i][8:11] + mo[i][4:5] + mo[i][0:4]  # 7890-123456 corrected to: 123 456 7890
            elif len(mo[i]) == 12:
                newNum = mo[i][9:12] + mo[i][8:9] + mo[i][5:8] + mo[i][4:5] + mo[i][0:4]  # 7890-456-123
            elif len(mo[i]) == 13:
                newNum = mo[i][5:13] + mo[i][4:5] + mo[i][0:4]  # 7890-(123)456
            else:  # length is 14
                newNum = mo[i][9:14] + mo[i][8:9] + mo[i][5:8] + mo[i][4:5] + mo[i][0:4]  # 7890-456-(123)

            correctPhoneNums.append(newNum) # add to list of corrected phone numbers
            newText = newText.replace(pn, newNum)  # replace the phone numbers
        if text != "":
            print("Bad phone numbers: ")
            print(mo)  # print

            # print the new string once all numbers are changed
            print("Corrected phone numbers: ")
            print(correctPhoneNums)

            print("The changed text was written to a new file successfully: new_text.txt\n")
            newTextFile = open("./new_text.txt", "w")
            newTextFile.write(newText)
        else:
            print("The input was empty.")
    except:
        print("somthing went wrong. Goodbye.")
        sys.exit()
 # end of RTL_phone_nums()

def remove_newline():  # removes all newline characters from copy-pasted text
    print("Enter text to remove all newlines. Enter control + z alone on a new line to end input. control + d on mac.")
    inStr = sys.stdin.readlines()  # gets input as a list of strings
    newStr = "".join(inStr)  # turn input list into a string
    newStr = newStr.replace("\r", "")  # remove carriage returns on windows and mac
    newStr = newStr.replace("\n", "")  # removes newlines on windows and linux

    print('\nHere is the string without newlines. ')
    print(newStr)

#----------# NOTE #----------#
# For review_dates()
# When searching potential dates, this includes dates with the number 1 or a | as a separator as converting PDFs to word docs 
# sometimes turns the / in a date into a 1 or |, especially when the date's font is in Italics 
# numbers that aren't dates also show up for review because they still might be dates with typos...sadly it happens a lot

# lists potential numeric dates that potentially could be ambiguous for review (i.e. 7/8/2023)
def review_dates():  
    dateRegex = re.compile(r''' 
               \d[\d]?[\.-_\s/|1]\d[\d]?[\.-_\s/|1]\d{2}[\d\d]?|    #date-month-year or month-date-year
               \d{2}[\d\d]?[\.-_\s/|1]\d[\d]?[\.-_\s/|1]\d[\d]?|    #year\month\date or year/date/month
               \d[\d]?[\.-_\s/|1]\d[\d]?|                           #date-month or month_date
               d{2}[\d\d]?[\.-_\s/|1]\d[\d]?|                       #year/month
               \d[\d]?[\.-_\s/|1]d{2}[\d\d]?                        #month/year
               #separate by -,.,/,spaces
               ''', re.VERBOSE)

    print("Enter text to review all dates. Enter control + z alone on a new line to end input. control + d on mac.")
    inStr = sys.stdin.readlines()
    inStr = " ".join(inStr)
    newStr = dateRegex.findall(inStr)
    print('\nHere are potential dates for review: ')
    print(newStr)

#renames files in same directory as this file
def replace_language_codes():
    # regex for some common language codes
    langCodeRegex = re.compile(r''' 
                               ^(.*?) #all text before the language code
                               \((es|fr|ar|sw)\) #language codes always inside parenthesis
                               (.*?)$ #all text after the language code
                               ''', re.VERBOSE)
    count = 0 #count number of files renamed
    
    # loop through each file in directory of current file
    for fileName in os.listdir('.'):
        mo = langCodeRegex.search(fileName)
        
        # skip files without language codes
        if mo == None:
            continue
        # get parts of the file name
        firstPart = mo.group(1)
        langCodePart = mo.group(2)
        lastPart = mo.group(3)
        
        # get full language name
        if langCodePart == 'sw':
            langCodePart = 'Swahili'
        elif langCodePart == 'fr':
            langCodePart = 'French'
        elif langCodePart == 'es':
            langCodePart = 'Spanish'
        elif langCodePart == 'ar':
            langCodePart = 'Arabic'
        
        # make the new file name
        newFileName = firstPart + '(' + langCodePart + ')' + lastPart
        
        # prepare the full file names
        absWorkingDir = os.path.abspath('.')
        fileName = os.path.join(absWorkingDir, fileName)
        newFileName = os.path.join(absWorkingDir, newFileName)
        
        # rename file
        print(f'renaming "{fileName}" to "{newFileName}"')
        count += 1
        shutil.move(fileName, newFileName)
    print(f'renamed {count} files.')
# end replace_language_codes    

